0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $0800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 6A 0A               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 6C 0A               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 6E 0A               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 70 0A               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 72 0A               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 74 0A               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 78 0A               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 7A 0A               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 7C 0A               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 7E 0A               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 08               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 6A 0A               LD   (RST08),HL   
0094   22 6C 0A               LD   (RST10),HL   
0097   22 6E 0A               LD   (RST18),HL   
009A   22 70 0A               LD   (RST20),HL   
009D   22 72 0A               LD   (RST28),HL   
00A0   22 74 0A               LD   (RST30),HL   
00A3   22 78 0A               LD   (INTVEC),HL   
00A6   22 7A 0A               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 7C 0A               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 7E 0A               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   C3 80 01               JP   start   
00C6                             ; 
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;       MINT Minimal Interpreter for the Z80
00C6                             ; 
00C6                             ;       Ken Boak, John Hardy and Craig Jones.
00C6                             ; 
00C6                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
00C6                             ; 
00C6                             ;       see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                DSIZE:    EQU   $80   
00C6                RSIZE:    EQU   $80   
00C6                TIBSIZE:   EQU   $100   
00C6                TRUE:     EQU   1   
00C6                FALSE:    EQU   0   
00C6                NSNUM:    EQU   5   ; namespaces
00C6                NSSIZE:   EQU   $40   
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   
0180                START:       
0180   31 80 08               LD   SP,DSTACK   
0183   CD A7 01               CALL   initialize   
0186   CD 88 07               CALL   printStr   
0189   4D 49 4E 54 20 56 31 2E 30 0D 0A 00 .CSTR   "MINT V1.0\r\n"   
0195   18 4A                  JR   interpret   
0197                             ; ***********************************************************************
0197                             ; Initial values for user mintVars		
0197                             ; ***********************************************************************		
0197                ISYSVARS:      
0197   80 08                  DW   dStack   ; a vS0
0199   00 00                  DW   FALSE   ; b vBase16
019B   00 00                  DW   0   ; c vTIBPtr
019D   C0 0A                  DW   DEFS   ; d vDEFS
019F   00 00                  DW   0   ; e vLastDef
01A1   00 00                  DW   0   ; f
01A3   00 00                  DW   0   ; g
01A5   00 0C                  DW   HEAP   ; h vHeapPtr
01A7                INITIALIZE:      
01A7   DD 21 00 09            LD   IX,RSTACK   
01AB   FD 21 40 02            LD   IY,NEXT   ; IY provides a faster jump to NEXT
01AF   21 97 01               LD   HL,iSysVars   
01B2   11 00 0A               LD   DE,sysVars   
01B5   01 10 00               LD   BC,8 * 2   
01B8   ED B0                  LDIR      
01BA   21 C0 0A               LD   HL,DEFS   
01BD   06 A0                  LD   B,NSSIZE/2 * NSNUM   
01BF                INIT1:       
01BF   36 A4                  LD   (HL),lsb(empty_)   
01C1   23                     INC   HL   
01C2   36 02                  LD   (HL),msb(empty_)   
01C4   23                     INC   HL   
01C5   10 F8                  DJNZ   init1   
01C7   C9                     RET      
01C8                MACRO:       ;=25
01C8   ED 43 04 0A            LD   (vTIBPtr),BC   
01CC   21 80 03               LD   HL,ctrlCodes   
01CF   85                     ADD   A,L   
01D0   6F                     LD   L,A   
01D1   5E                     LD   E,(HL)   
01D2   16 02                  LD   D,msb(macros)   
01D4   D5                     PUSH   DE   
01D5   CD 74 07               CALL   ENTER   
01D8   5C 47 00               .CSTR   "\\G"   
01DB   ED 4B 04 0A            LD   BC,(vTIBPtr)   
01DF   18 0A                  JR   interpret2   
01E1                INTERPRET:      
01E1   CD 88 02               CALL   prompt   
01E4   01 00 00               LD   BC,0   ; load BC with offset into TIB
01E7   ED 43 04 0A            LD   (vTIBPtr),BC   
01EB                INTERPRET2:      ; calc nesting (a macro might have changed it)
01EB   1E 00                  LD   E,0   ; initilize nesting value
01ED   C5                     PUSH   BC   ; save offset into TIB,
01EE                             ; BC is also the count of chars in TIB
01EE   21 00 09               LD   HL,TIB   ; HL is start of TIB
01F1   18 06                  JR   interpret4   
01F3                INTERPRET3:      
01F3   7E                     LD   A,(HL)   ; A = char in TIB
01F4   23                     INC   HL   ; inc pointer into TIB
01F5   0B                     DEC   BC   ; dec count of chars in TIB
01F6   CD 5C 02               CALL   nesting   ; update nesting value
01F9                INTERPRET4:      
01F9   79                     LD   A,C   ; is count zero?
01FA   B0                     OR   B   
01FB   20 F6                  JR   NZ,interpret3   ; if not loop
01FD   C1                     POP   BC   ; restore offset into TIB
01FE                             ; *******************************************************************
01FE                             ; Wait for a character from the serial input (keyboard)
01FE                             ; and store it in the text buffer. Keep accepting characters,
01FE                             ; increasing the instruction pointer BC - until a newline received.
01FE                             ; *******************************************************************
01FE                WAITCHAR:      
01FE   CD 81 00               CALL   getchar   ; loop around waiting for character
0201   FE 20                  CP   $20   
0203   30 0C                  JR   NC,waitchar1   
0205   FE 00                  CP   $0   ; is it end of string?
0207   28 2C                  JR   Z,waitchar4   
0209   FE 0D                  CP   "\r"   ; carriage return?
020B   28 12                  JR   Z,waitchar3   
020D   16 00                  LD   D,0   
020F   18 B7                  JR   macro   
0211                WAITCHAR1:      
0211   21 00 09               LD   HL,TIB   
0214   09                     ADD   HL,BC   
0215   77                     LD   (HL),A   ; store the character in textbuf
0216   03                     INC   BC   
0217   CD 85 00               CALL   putchar   ; echo character to screen
021A   CD 5C 02               CALL   nesting   
021D   18 DF                  JR   waitchar   ; wait for next character
021F                WAITCHAR3:      
021F   21 00 09               LD   HL,TIB   
0222   09                     ADD   HL,BC   
0223   36 0D                  LD   (HL),"\r"   ; store the crlf in textbuf
0225   23                     INC   HL   
0226   36 0A                  LD   (HL),"\n"   
0228   23                     INC   HL   ; ????
0229   03                     INC   BC   
022A   03                     INC   BC   
022B   CD 9D 02               CALL   crlf   ; echo character to screen
022E   7B                     LD   A,E   ; if zero nesting append and ETX after \r
022F   B7                     OR   A   
0230   20 CC                  JR   NZ,waitchar   
0232   36 03                  LD   (HL),$03   ; store end of text ETX in text buffer
0234   03                     INC   BC   
0235                WAITCHAR4:      
0235   ED 43 04 0A            LD   (vTIBPtr),BC   
0239   01 00 09               LD   BC,TIB   ; Instructions stored on heap at address HERE
023C   0B                     DEC   BC   
023D   C3 40 02               JP   NEXT   
0240                             ; ********************************************************************************
0240                             ; 
0240                             ; Dispatch Routine.
0240                             ; 
0240                             ; Get the next character and form a 1 byte jump address
0240                             ; 
0240                             ; This target jump address is loaded into HL, and using JP (HL) to quickly
0240                             ; jump to the selected function.
0240                             ; 
0240                             ; Individual handler routines will deal with each category:
0240                             ; 
0240                             ; 1. Detect characters A-Z and jump to the User Command handler routine
0240                             ; 
0240                             ; 2. Detect characters a-z and jump to the variable handler routine
0240                             ; 
0240                             ; 3. All other characters are punctuation and cause a jump to the associated
0240                             ; primitive code.
0240                             ; 
0240                             ; Instruction Pointer IP BC is incremented
0240                             ; 
0240                             ; *********************************************************************************
0240                NEXT:        ; 9
0240   03                     INC   BC   ;       Increment the IP
0241   0A                     LD   A,(BC)   ;       Get the next character and dispatch
0242   6F                     LD   L,A   ;       Index into table
0243   26 03                  LD   H,msb(opcodes)   ;       Start address of jump table
0245   6E                     LD   L,(HL)   ;       get low jump address
0246   26 04                  LD   H,msb(page4)   ;       Load H with the 1st page address
0248   E9                     JP   (HL)   ;       Jump to routine
0249                             ; ARRAY compilation routine
0249                COMPNEXT:      ;=20
0249   D1                     POP   DE   ; DE = return address
024A   2A 0E 0A               LD   HL,(vHeapPtr)   ; load heap ptr
024D   73                     LD   (HL),E   ; store lsb
024E   3A 36 0A               LD   A,(vByteMode)   
0251   23                     INC   HL   
0252   B7                     OR   A   
0253   20 02                  JR   NZ,compNext1   
0255   72                     LD   (HL),D   
0256   23                     INC   HL   
0257                COMPNEXT1:      
0257   22 0E 0A               LD   (vHeapPtr),HL   ; save heap ptr
025A   18 E4                  JR   NEXT   
025C                             ; **************************************************************************
025C                             ; calculate nesting value
025C                             ; A is char to be tested,
025C                             ; E is the nesting value (initially 0)
025C                             ; E is increased by ( and [
025C                             ; E is decreased by ) and ]
025C                             ; E has its bit 7 toggled by `
025C                             ; limited to 127 levels
025C                             ; **************************************************************************
025C                NESTING:      ;=44
025C   FE 60                  CP   "`"   
025E   20 0A                  JR   NZ,nesting1   
0260   CB 7B                  BIT   7,E   
0262   28 03                  JR   Z,nesting1a   
0264   CB BB                  RES   7,E   
0266   C9                     RET      
0267                NESTING1A:      
0267   CB FB                  SET   7,E   
0269   C9                     RET      
026A                NESTING1:      
026A   CB 7B                  BIT   7,E   
026C   C0                     RET   NZ   
026D   FE 3A                  CP   ":"   
026F   28 08                  JR   Z,nesting2   
0271   FE 5B                  CP   "["   
0273   28 04                  JR   Z,nesting2   
0275   FE 28                  CP   "("   
0277   20 02                  JR   NZ,nesting3   
0279                NESTING2:      
0279   1C                     INC   E   
027A   C9                     RET      
027B                NESTING3:      
027B   FE 3B                  CP   ";"   
027D   28 07                  JR   Z,nesting4   
027F   FE 5D                  CP   "]"   
0281   28 03                  JR   Z,nesting4   
0283   FE 29                  CP   ")"   
0285   C0                     RET   NZ   
0286                NESTING4:      
0286   1D                     DEC   E   
0287   C9                     RET      
0288                PROMPT:      ;=9
0288   CD 88 07               CALL   printStr   
028B   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0290   C9                     RET      
0291                ETX:         ;=12
0291   21 80 F7               LD   HL,-DSTACK   
0294   39                     ADD   HL,SP   
0295   30 03                  JR   NC,etx1   
0297   31 80 08               LD   SP,DSTACK   
029A                ETX1:        
029A   C3 E1 01               JP   interpret   
029D                CRLF:        ;=7
029D   CD 88 07               CALL   printStr   
02A0   0D 0A 00               .CSTR   "\r\n"   
02A3   C9                     RET      
02A4                             ; **************************************************************************
02A4                             ; Macros must be written in Mint and end with ;
02A4                             ; this code must not span pages
02A4                             ; **************************************************************************
02A4                MACROS:      
02A4                EMPTY_:      
02A4   3B                     DB   ";"   
02A5                BACKSP_:      
02A5   5C 63 40 30 3D 30 3D 28 31 5F 5C 63 5C 2B 60 08 20 08 60 29 3B DB   "\\c@0=0=(1_\\c\\+`\b \b`);"   
02BA                REEDIT_:      
02BA   5C 65 5C 40 5C 5A 3B   DB   "\\e\\@\\Z;"   
02C1                EDIT_:       
02C1   60 3F 60 5C 4B 5C 3E 5C 5E 41 2D 5C 5A 3B 00 .CSTR   "`?`\\K\\>\\^A-\\Z;"   
02D0                LIST_:       
02D0   5C 4E 32 36 28 5C 69 40 5C 5A 5C 63 40 30 3E 28 5C 4E 29 29 5C 3E 3B 00 .CSTR   "\\N26(\\i@\\Z\\c@0>(\\N))\\>;"   
02E8                PRINTSTACK_:      
02E8   60 3D 3E 20 60 5C 50 5C 4E 5C 3E 3B 00 .CSTR   "`=> `\\P\\N\\>;"   
02F5                TOGGLEBASE_:      
02F5   5C 62 40 30 3D 5C 62 21 3B 00 .CSTR   "\\b@0=\\b!;"   
02FF                             ; **************************************************************************
02FF                             ; Page 2  Jump Tables
02FF                             ; **************************************************************************
02FF                          ALIGN   $100   
0300                OPCODES:      
0300                             ; ***********************************************************************
0300                             ; Initial values for user mintVars		
0300                             ; ***********************************************************************		
0300   6E                     DB   lsb(exit_)   ;   NUL
0301   82                     DB   lsb(nop_)   ;   SOH
0302   82                     DB   lsb(nop_)   ;   STX
0303   6B                     DB   lsb(etx_)   ;   ETX
0304   82                     DB   lsb(nop_)   ;   EOT
0305   82                     DB   lsb(nop_)   ;   ENQ
0306   82                     DB   lsb(nop_)   ;   ACK
0307   82                     DB   lsb(nop_)   ;   BEL
0308   82                     DB   lsb(nop_)   ;   BS
0309   82                     DB   lsb(nop_)   ;   TAB
030A   82                     DB   lsb(nop_)   ;   LF
030B   82                     DB   lsb(nop_)   ;   VT
030C   82                     DB   lsb(nop_)   ;   FF
030D   82                     DB   lsb(nop_)   ;   CR
030E   82                     DB   lsb(nop_)   ;   SO
030F   82                     DB   lsb(nop_)   ;   SI
0310   82                     DB   lsb(nop_)   ;   DLE
0311   82                     DB   lsb(nop_)   ;   DC1
0312   82                     DB   lsb(nop_)   ;   DC2
0313   82                     DB   lsb(nop_)   ;   DC3
0314   82                     DB   lsb(nop_)   ;   DC4
0315   82                     DB   lsb(nop_)   ;   NAK
0316   82                     DB   lsb(nop_)   ;   SYN
0317   82                     DB   lsb(nop_)   ;   ETB
0318   82                     DB   lsb(nop_)   ;   CAN
0319   82                     DB   lsb(nop_)   ;   EM
031A   82                     DB   lsb(nop_)   ;   SUB
031B   82                     DB   lsb(nop_)   ;   ESC
031C   82                     DB   lsb(nop_)   ;   FS
031D   82                     DB   lsb(nop_)   ;   GS
031E   82                     DB   lsb(nop_)   ;   RS
031F   82                     DB   lsb(nop_)   ;   US
0320   82                     DB   lsb(nop_)   ;   SP
0321   96                     DB   lsb(store_)   ;   !
0322   66                     DB   lsb(dup_)   ;   "
0323   7F                     DB   lsb(hex_)   ;    #
0324   9D                     DB   lsb(swap_)   ;    $
0325   88                     DB   lsb(over_)   ;    %
0326   00                     DB   lsb(and_)   ;    &
0327   63                     DB   lsb(drop_)   ;    '
0328   3D                     DB   lsb(begin_)   ;    (
0329   ED                     DB   lsb(again_)   ;    )
032A   EB                     DB   lsb(mul_)   ;    *
032B   22                     DB   lsb(add_)   ;    +
032C   52                     DB   lsb(hdot_)   ;    ,
032D   B5                     DB   lsb(sub_)   ;    -
032E   58                     DB   lsb(dot_)   ;    .
032F   E8                     DB   lsb(div_)   ;    /
0330   85                     DB   lsb(num_)   ;    0
0331   85                     DB   lsb(num_)   ;    1
0332   85                     DB   lsb(num_)   ;    2
0333   85                     DB   lsb(num_)   ;    3
0334   85                     DB   lsb(num_)   ;    4
0335   85                     DB   lsb(num_)   ;    5
0336   85                     DB   lsb(num_)   ;    6
0337   85                     DB   lsb(num_)   ;    7
0338   85                     DB   lsb(num_)   ;    8
0339   85                     DB   lsb(num_)   ;    9
033A   4F                     DB   lsb(def_)   ;    :
033B   8F                     DB   lsb(ret_)   ;    ;
033C   CD                     DB   lsb(lt_)   ;    <
033D   BD                     DB   lsb(eq_)   ;    =
033E   C9                     DB   lsb(gt_)   ;    >
033F   EF                     DB   lsb(getRef_)   ;    ?
0340   78                     DB   lsb(fetch_)   ;    @
0341   40                     DB   lsb(call_)   ;    A
0342   40                     DB   lsb(call_)   ;    B
0343   40                     DB   lsb(call_)   ;    C
0344   40                     DB   lsb(call_)   ;    D
0345   40                     DB   lsb(call_)   ;    E
0346   40                     DB   lsb(call_)   ;    F
0347   40                     DB   lsb(call_)   ;    G
0348   40                     DB   lsb(call_)   ;    H
0349   40                     DB   lsb(call_)   ;    I
034A   40                     DB   lsb(call_)   ;    J
034B   40                     DB   lsb(call_)   ;    K
034C   40                     DB   lsb(call_)   ;    L
034D   40                     DB   lsb(call_)   ;    M
034E   40                     DB   lsb(call_)   ;    N
034F   40                     DB   lsb(call_)   ;    O
0350   40                     DB   lsb(call_)   ;    P
0351   40                     DB   lsb(call_)   ;    Q
0352   40                     DB   lsb(call_)   ;    R
0353   40                     DB   lsb(call_)   ;    S
0354   40                     DB   lsb(call_)   ;    T
0355   40                     DB   lsb(call_)   ;    U
0356   40                     DB   lsb(call_)   ;    V
0357   40                     DB   lsb(call_)   ;    W
0358   40                     DB   lsb(call_)   ;    X
0359   40                     DB   lsb(call_)   ;    Y
035A   40                     DB   lsb(call_)   ;    Z
035B   28                     DB   lsb(arrDef_)   ;    [
035C   F1                     DB   lsb(alt_)   ;    \
035D   3A                     DB   lsb(arrEnd_)   ;    ]
035E   14                     DB   lsb(xor_)   ;    ^
035F   AF                     DB   lsb(neg_)   ;    _
0360   F3                     DB   lsb(str_)   ;    `
0361   DE                     DB   lsb(var_)   ;    a
0362   DE                     DB   lsb(var_)   ;    b
0363   DE                     DB   lsb(var_)   ;    c
0364   DE                     DB   lsb(var_)   ;    d
0365   DE                     DB   lsb(var_)   ;    e
0366   DE                     DB   lsb(var_)   ;    f
0367   DE                     DB   lsb(var_)   ;    g
0368   DE                     DB   lsb(var_)   ;    h
0369   DE                     DB   lsb(var_)   ;    i
036A   DE                     DB   lsb(var_)   ;    j
036B   DE                     DB   lsb(var_)   ;    k
036C   DE                     DB   lsb(var_)   ;    l
036D   DE                     DB   lsb(var_)   ;    m
036E   DE                     DB   lsb(var_)   ;    n
036F   DE                     DB   lsb(var_)   ;    o
0370   DE                     DB   lsb(var_)   ;    p
0371   DE                     DB   lsb(var_)   ;    q
0372   DE                     DB   lsb(var_)   ;    r
0373   DE                     DB   lsb(var_)   ;    s
0374   DE                     DB   lsb(var_)   ;    t
0375   DE                     DB   lsb(var_)   ;    u
0376   DE                     DB   lsb(var_)   ;    v
0377   DE                     DB   lsb(var_)   ;    w
0378   DE                     DB   lsb(var_)   ;    x
0379   DE                     DB   lsb(var_)   ;    y
037A   DE                     DB   lsb(var_)   ;    z
037B   A2                     DB   lsb(shl_)   ;    {
037C   0B                     DB   lsb(or_)   ;    |
037D   A7                     DB   lsb(shr_)   ;    }
037E   1D                     DB   lsb(inv_)   ;    ~
037F   82                     DB   lsb(nop_)   ;    backspace
0380                             ; ***********************************************************************
0380                             ; Alternate function codes		
0380                             ; ***********************************************************************		
0380                CTRLCODES:      
0380                ALTCODES:      
0380   A4                     DB   lsb(empty_)   ; NUL ^@
0381   A4                     DB   lsb(empty_)   ; SOH ^A
0382   F5                     DB   lsb(toggleBase_)   ; STX ^B
0383   A4                     DB   lsb(empty_)   ; ETX ^C
0384   A4                     DB   lsb(empty_)   ; EOT ^D
0385   C1                     DB   lsb(edit_)   ; ENQ ^E
0386   A4                     DB   lsb(empty_)   ; ACK ^F
0387   A4                     DB   lsb(empty_)   ; BEL ^G
0388   A5                     DB   lsb(backsp_)   ; BS  ^H
0389   A4                     DB   lsb(empty_)   ; TAB ^I
038A   BA                     DB   lsb(reedit_)   ; LF  ^J
038B   A4                     DB   lsb(empty_)   ; VT  ^K
038C   D0                     DB   lsb(list_)   ; FF  ^L
038D   A4                     DB   lsb(empty_)   ; CR  ^M
038E   A4                     DB   lsb(empty_)   ; SO  ^N
038F   A4                     DB   lsb(empty_)   ; SI  ^O
0390   E8                     DB   lsb(printStack_)   ; DLE ^P
0391   A4                     DB   lsb(empty_)   ; DC1 ^Q
0392   A4                     DB   lsb(empty_)   ; DC2 ^R
0393   A4                     DB   lsb(empty_)   ; DC3 ^S
0394   A4                     DB   lsb(empty_)   ; DC4 ^T
0395   A4                     DB   lsb(empty_)   ; NAK ^U
0396   A4                     DB   lsb(empty_)   ; SYN ^V
0397   A4                     DB   lsb(empty_)   ; ETB ^W
0398   A4                     DB   lsb(empty_)   ; CAN ^X
0399   A4                     DB   lsb(empty_)   ; EM  ^Y
039A   A4                     DB   lsb(empty_)   ; SUB ^Z
039B   A4                     DB   lsb(empty_)   ; ESC ^[
039C   A4                     DB   lsb(empty_)   ; FS  ^\
039D   A4                     DB   lsb(empty_)   ; GS  ^]
039E   A4                     DB   lsb(empty_)   ; RS  ^^
039F   A4                     DB   lsb(empty_)   ; US  ^_)
03A0   0A                     DB   lsb(aNop_)   ; SP  ^`
03A1   1A                     DB   lsb(cStore_)   ;    !
03A2   0A                     DB   lsb(aNop_)   ;    "
03A3   0A                     DB   lsb(aNop_)   ;    #
03A4   0A                     DB   lsb(aNop_)   ;    $  ( -- adr ) text input ptr
03A5   0A                     DB   lsb(aNop_)   ;    %
03A6   0A                     DB   lsb(aNop_)   ;    &
03A7   0A                     DB   lsb(aNop_)   ;    '
03A8   34                     DB   lsb(ifte_)   ;    (  ( b -- )
03A9   0A                     DB   lsb(aNop_)   ;    )
03AA   0A                     DB   lsb(aNop_)   ;    *
03AB   0A                     DB   lsb(aNop_)   ;    +
03AC   0A                     DB   lsb(aNop_)   ;    ,
03AD   0A                     DB   lsb(aNop_)   ;    -
03AE   0A                     DB   lsb(aNop_)   ;    .
03AF   0A                     DB   lsb(aNop_)   ;    /
03B0   57                     DB   lsb(NSCall_)   ;    0
03B1   57                     DB   lsb(NSCall_)   ;    1
03B2   57                     DB   lsb(NSCall_)   ;    2
03B3   57                     DB   lsb(NSCall_)   ;    3
03B4   57                     DB   lsb(NSCall_)   ;    4
03B5   0A                     DB   lsb(aNop_)   ;    5
03B6   0A                     DB   lsb(aNop_)   ;    6
03B7   0A                     DB   lsb(aNop_)   ;    7
03B8   0A                     DB   lsb(aNop_)   ;    8
03B9   0A                     DB   lsb(aNop_)   ;    9
03BA   0A                     DB   lsb(aNop_)   ;    :  start defining a macro
03BB   0A                     DB   lsb(aNop_)   ;    ;
03BC   0A                     DB   lsb(aNop_)   ;    <
03BD   0A                     DB   lsb(aNop_)   ;    =
03BE   79                     DB   lsb(prompt_)   ;    >
03BF   0A                     DB   lsb(aNop_)   ;    ?
03C0   05                     DB   lsb(cFetch_)   ;    @
03C1   0A                     DB   lsb(aNop_)   ;    A
03C2   B5                     DB   lsb(break_)   ;    B
03C3   82                     DB   lsb(nop_)   ;    C
03C4   1F                     DB   lsb(depth_)   ;    D  ( -- val ) depth of data stack
03C5   2D                     DB   lsb(emit_)   ;    E   ( val -- ) emits a char to output
03C6   0A                     DB   lsb(aNop_)   ;    F
03C7   4E                     DB   lsb(go_)   ;    G   ( -- ? ) execute mint definition
03C8   0A                     DB   lsb(aNop_)   ;    H
03C9   8C                     DB   lsb(inPort_)   ;    I  ( port -- val )
03CA   0A                     DB   lsb(aNop_)   ;    J
03CB   97                     DB   lsb(key_)   ;    K  ( -- val )  read a char from input
03CC   0A                     DB   lsb(aNop_)   ;    L
03CD   0A                     DB   lsb(aNop_)   ;    M
03CE   A0                     DB   lsb(newln_)   ;    N   ; prints a newline to output
03CF   A5                     DB   lsb(outPort_)   ;    O  ( val port -- )
03D0   C4                     DB   lsb(printStk_)   ;    P  ( -- ) non-destructively prints stack
03D1   0A                     DB   lsb(aNop_)   ;    Q  quits from Mint REPL
03D2   AE                     DB   lsb(rot_)   ;    R  ( a b c -- b c a )
03D3   0A                     DB   lsb(aNop_)   ;    S
03D4   0A                     DB   lsb(aNop_)   ;    T
03D5   0A                     DB   lsb(aNop_)   ;    U
03D6   0A                     DB   lsb(aNop_)   ;    V
03D7   0A                     DB   lsb(aNop_)   ;    W   ; ( b -- ) if false, skip to end of loop
03D8   46                     DB   lsb(exec_)   ;    X
03D9   0A                     DB   lsb(aNop_)   ;    Y
03DA   C6                     DB   lsb(editDef_)   ;    Z
03DB   00                     DB   lsb(cArrDef_)   ;    [
03DC   11                     DB   lsb(comment_)   ;    \  comment text, skips reading until end of line
03DD   0A                     DB   lsb(aNop_)   ;    ]
03DE   0C                     DB   lsb(charCode_)   ;    ^
03DF   0A                     DB   lsb(aNop_)   ;    _
03E0   0A                     DB   lsb(aNop_)   ;    `
03E1   7E                     DB   lsb(sysVar_)   ;    a  ; start of data stack variable
03E2   7E                     DB   lsb(sysVar_)   ;    b  ; base16 variable
03E3   7E                     DB   lsb(sysVar_)   ;    c  ; TIBPtr variable
03E4   7E                     DB   lsb(sysVar_)   ;    d
03E5   7E                     DB   lsb(sysVar_)   ;    e
03E6   7E                     DB   lsb(sysVar_)   ;    f
03E7   7E                     DB   lsb(sysVar_)   ;    g
03E8   7E                     DB   lsb(sysVar_)   ;    h  ; heap ptr variable
03E9   88                     DB   lsb(i_)   ;    i  ; returns index variable of current loop
03EA   7E                     DB   lsb(sysVar_)   ;    j  ; returns index variable of outer loop
03EB   7E                     DB   lsb(sysVar_)   ;    k
03EC   7E                     DB   lsb(sysVar_)   ;    l
03ED   7E                     DB   lsb(sysVar_)   ;    m  ( a b -- c ) return the minimum value
03EE   7E                     DB   lsb(sysVar_)   ;    n
03EF   7E                     DB   lsb(sysVar_)   ;    o
03F0   7E                     DB   lsb(sysVar_)   ;    p
03F1   7E                     DB   lsb(sysVar_)   ;    q
03F2   7E                     DB   lsb(sysVar_)   ;    r
03F3   7E                     DB   lsb(sysVar_)   ;    s
03F4   7E                     DB   lsb(sysVar_)   ;    t
03F5   7E                     DB   lsb(sysVar_)   ;    u
03F6   7E                     DB   lsb(sysVar_)   ;    v
03F7   7E                     DB   lsb(sysVar_)   ;    w
03F8   7E                     DB   lsb(sysVar_)   ;    x
03F9   7E                     DB   lsb(sysVar_)   ;    y
03FA   7E                     DB   lsb(sysVar_)   ;    z
03FB   76                     DB   lsb(NSEnter_)   ;    {
03FC   0A                     DB   lsb(aNop_)   ;    |
03FD   6E                     DB   lsb(NSExit_)   ;    }
03FE   0A                     DB   lsb(aNop_)   ;    ~
03FF   0A                     DB   lsb(aNop_)   ;    BS		
0400                             ; **********************************************************************			
0400                             ; Page 4 primitive routines
0400                             ; **********************************************************************
0400                          ALIGN   $100   
0400                PAGE4:       
0400                AND_:        
0400   D1                     POP   DE   ;     Bitwise AND the top 2 elements of the stack
0401   E1                     POP   HL   ; 
0402   7B                     LD   A,E   ; 
0403   A5                     AND   L   ; 
0404   6F                     LD   L,A   ; 
0405   7A                     LD   A,D   ; 
0406   A4                     AND   H   ; 
0407                AND1:        
0407   67                     LD   H,A   ; 
0408   E5                     PUSH   HL   ; 
0409   FD E9                  JP   (IY)   ; 
040B                             ; 
040B                OR_:         
040B   D1                     POP   DE   ; Bitwise OR the top 2 elements of the stack
040C   E1                     POP   HL   
040D   7B                     LD   A,E   
040E   B5                     OR   L   
040F   6F                     LD   L,A   
0410   7A                     LD   A,D   
0411   B4                     OR   H   
0412   18 F3                  JR   and1   
0414                XOR_:        
0414   D1                     POP   DE   ; Bitwise XOR the top 2 elements of the stack
0415                XOR1:        
0415   E1                     POP   HL   
0416   7B                     LD   A,E   
0417   AD                     XOR   L   
0418   6F                     LD   L,A   
0419   7A                     LD   A,D   
041A   AC                     XOR   H   
041B   18 EA                  JR   and1   
041D                INV_:        ; Bitwise INVert the top member of the stack
041D   11 FF FF               LD   DE,$FFFF   ; by xoring with $FFFF
0420   18 F3                  JR   xor1   
0422                ADD_:        ; Add the top 2 members of the stack
0422   D1                     POP   DE   
0423   E1                     POP   HL   
0424   19                     ADD   HL,DE   
0425   E5                     PUSH   HL   
0426   FD E9                  JP   (IY)   
0428                ARRDEF_:      
0428                ARRDEF:      ;=18
0428   3E 00                  LD   A,FALSE   
042A                ARRDEF1:      
042A   FD 21 49 02            LD   IY,compNEXT   
042E   32 36 0A               LD   (vByteMode),A   
0431   2A 0E 0A               LD   HL,(vHeapPtr)   ; HL = heap ptr
0434   CD D9 07               CALL   rpush   ; save start of array \[  \]
0437   C3 40 02               JP   NEXT   ; hardwired to NEXT
043A   C3 1C 07     ARREND_:   JP   arrEnd   
043D   C3 A9 05     BEGIN_:   JP   begin   
0440                CALL_:       
0440   60 69                  LD   HL,BC   
0442   CD D9 07               CALL   rpush   ; save Instruction Pointer
0445   0A                     LD   A,(BC)   
0446   CD 7D 07               CALL   lookupDef   
0449   4E                     LD   C,(HL)   
044A   23                     INC   HL   
044B   46                     LD   B,(HL)   
044C   0B                     DEC   BC   
044D   FD E9                  JP   (IY)   
044F   C3 64 05     DEF_:     JP   def   
0452                HDOT_:       ; print hexadecimal
0452   E1                     POP   HL   
0453   CD BA 07               CALL   printhex   
0456   18 04                  JR   dot2   
0458                DOT_:        
0458   E1                     POP   HL   
0459   CD 96 07               CALL   printdec   
045C                DOT2:        
045C   3E 20                  LD   A," "   
045E   CD 85 00               CALL   putChar   
0461   FD E9                  JP   (IY)   
0463                DROP_:       ; Discard the top member of the stack
0463   E1                     POP   HL   
0464   FD E9                  JP   (IY)   
0466                DUP_:        
0466   E1                     POP   HL   ; Duplicate the top member of the stack
0467   E5                     PUSH   HL   
0468   E5                     PUSH   HL   
0469   FD E9                  JP   (IY)   
046B                ETX_:        
046B   C3 91 02               JP   ETX   
046E                EXIT_:       
046E   03                     INC   BC   
046F   50 59                  LD   DE,BC   
0471   CD E4 07               CALL   rpop   ; Restore Instruction pointer
0474   44 4D                  LD   BC,HL   
0476   EB                     EX   DE,HL   
0477   E9                     JP   (HL)   
0478                FETCH_:      ; Fetch the value from the address placed on the top of the stack
0478   E1                     POP   HL   
0479                FETCH1:      
0479   5E                     LD   E,(HL)   
047A   23                     INC   HL   
047B   56                     LD   D,(HL)   
047C   D5                     PUSH   DE   
047D   FD E9                  JP   (IY)   
047F   C3 38 07     HEX_:     JP   hex   
0482   C3 40 02     NOP_:     JP   NEXT   ; hardwire white space to always go to NEXT (important for arrays)
0485                NUM_:        
0485   C3 87 05               JP   num   
0488                OVER_:       
0488   E1                     POP   HL   ; Duplicate 2nd element of the stack
0489   D1                     POP   DE   
048A   D5                     PUSH   DE   
048B   E5                     PUSH   HL   
048C   D5                     PUSH   DE   ; And push it to top of stack
048D   FD E9                  JP   (IY)   
048F                RET_:        
048F   CD E4 07               CALL   rpop   ; Restore Instruction pointer
0492   44 4D                  LD   BC,HL   
0494   FD E9                  JP   (IY)   
0496                STORE_:      ; Store the value at the address placed on the top of the stack
0496   E1                     POP   HL   
0497   D1                     POP   DE   
0498   73                     LD   (HL),E   
0499   23                     INC   HL   
049A   72                     LD   (HL),D   
049B   FD E9                  JP   (IY)   
049D                             ; $ swap                        ; a b -- b a Swap the top 2 elements of the stack
049D                SWAP_:       
049D   E1                     POP   HL   
049E   E3                     EX   (SP),HL   
049F   E5                     PUSH   HL   
04A0   FD E9                  JP   (IY)   
04A2                             ;  Left shift { is multiply by 2		
04A2                SHL_:        
04A2   E1                     POP   HL   ; Duplicate the top member of the stack
04A3   29                     ADD   HL,HL   
04A4   E5                     PUSH   HL   ; shift left fallthrough into add_
04A5   FD E9                  JP   (IY)   ; 
04A7                             ;  Right shift } is a divide by 2		
04A7                SHR_:        
04A7   E1                     POP   HL   ; Get the top member of the stack
04A8                SHR1:        
04A8   CB 3C                  SRL   H   
04AA   CB 1D                  RR   L   
04AC   E5                     PUSH   HL   
04AD   FD E9                  JP   (IY)   ; 
04AF   21 00 00     NEG_:     LD   HL,0   ; NEGate the value on top of stack (2's complement)
04B2   D1                     POP   DE   ; 
04B3   18 02                  JR   SUB_2   ; use the SUBtract routine
04B5                SUB_:        ; Subtract the value 2nd on stack from top of stack
04B5   D1                     POP   DE   ; 
04B6   E1           SUB_1:    POP   HL   ;      Entry point for INVert
04B7   A7           SUB_2:    AND   A   ;      Entry point for NEGate
04B8   ED 52                  SBC   HL,DE   ; 15t
04BA   E5                     PUSH   HL   ; 
04BB   FD E9                  JP   (IY)   ; 
04BD                             ; 5
04BD   E1           EQ_:      POP   HL   
04BE   D1                     POP   DE   
04BF   A7                     AND   A   ; reset the carry flag
04C0   ED 52                  SBC   HL,DE   ; only equality sets HL=0 here
04C2   28 16                  JR   Z,equal   
04C4   21 00 00               LD   HL,0   
04C7   18 12                  JR   less   ; HL = 1
04C9   D1           GT_:      POP   DE   
04CA   E1                     POP   HL   
04CB   18 02                  JR   cmp_   
04CD   E1           LT_:      POP   HL   
04CE   D1                     POP   DE   
04CF   A7           CMP_:     AND   A   ; reset the carry flag
04D0   ED 52                  SBC   HL,DE   ; only equality sets HL=0 here
04D2   28 07                  JR   Z,less   ; equality returns 0  KB 25/11/21
04D4   21 00 00               LD   HL,0   
04D7   FA DB 04               JP   M,less   
04DA   2C           EQUAL:    INC   L   ; HL = 1
04DB                LESS:        
04DB   E5                     PUSH   HL   
04DC   FD E9                  JP   (IY)   
04DE                VAR_:        
04DE   0A                     LD   A,(BC)   
04DF   D6 21                  SUB   "a" - ((VARS - mintVars)/2)   
04E1   87                     ADD   A,A   
04E2   26 0A                  LD   H,msb(mintVars)   
04E4   6F                     LD   L,A   
04E5   E5                     PUSH   HL   
04E6   FD E9                  JP   (IY)   
04E8                DIV_:        
04E8   C3 D7 05               JP   div   
04EB                MUL_:        
04EB   18 28                  JR   mul   
04ED                AGAIN_:      
04ED   18 42                  JR   again   
04EF                GETREF_:      
04EF   18 11                  JR   getRef   
04F1                ALT_:        
04F1   18 17                  JR   alt   
04F3                STR_:        
04F3                STR:         
04F3   03                     INC   BC   
04F4                STR1:        
04F4   0A                     LD   A,(BC)   
04F5   03                     INC   BC   
04F6   FE 60                  CP   "`"   ; ` is the string terminator
04F8   28 05                  JR   Z,str2   
04FA   CD 85 00               CALL   putchar   
04FD   18 F5                  JR   str1   
04FF                STR2:        
04FF   0B                     DEC   BC   
0500   FD E9                  JP   (IY)   
0502                             ;*******************************************************************
0502                             ; Page 5 primitive routines
0502                             ;*******************************************************************
0502                             ;falls through
0502                GETREF:      ;=8
0502   03                     INC   BC   
0503   0A                     LD   A,(BC)   
0504   CD 7D 07               CALL   lookupDef   
0507   C3 79 04               JP   fetch1   
050A                ALT:         ;=11
050A   03                     INC   BC   
050B   0A                     LD   A,(BC)   
050C   21 80 03               LD   HL,altCodes   
050F   85                     ADD   A,L   
0510   6F                     LD   L,A   
0511   6E                     LD   L,(HL)   ;       get low jump address
0512   26 06                  LD   H,msb(page6)   ; Load H with the 5th page address
0514   E9                     JP   (HL)   ;       Jump to routine
0515                             ; ********************************************************************
0515                             ; 16-bit multiply
0515                MUL:         ;=19
0515   D1                     POP   DE   ; get first value
0516   E1                     POP   HL   
0517   C5                     PUSH   BC   ; Preserve the IP
0518   44                     LD   B,H   ; BC = 2nd value
0519   4D                     LD   C,L   
051A   21 00 00               LD   HL,0   
051D   3E 10                  LD   A,16   
051F                MUL2:        
051F   29                     ADD   HL,HL   
0520   CB 13                  RL   E   
0522   CB 12                  RL   D   
0524   30 04                  JR   NC,$+6   
0526   09                     ADD   HL,BC   
0527   30 01                  JR   NC,$+3   
0529   13                     INC   DE   
052A   3D                     DEC   A   
052B   20 F2                  JR   NZ,mul2   
052D   C1                     POP   BC   ; Restore the IP
052E   E5                     PUSH   HL   ; Put the product on the stack - stack bug fixed 2/12/21
052F   FD E9                  JP   (IY)   
0531                AGAIN:       
0531   DD 5E 00               LD   E,(IX+0)   ; peek loop var
0534   DD 56 01               LD   D,(IX+1)   
0537   7A                     LD   A,D   ; check if IFTEMode
0538   A3                     AND   E   
0539   3C                     INC   A   
053A   20 07                  JR   NZ,again1   
053C   13                     INC   DE   
053D   D5                     PUSH   DE   ; push FALSE condition
053E   11 02 00               LD   DE,2   
0541   18 1D                  JR   again3   ; drop IFTEMode
0543                AGAIN1:      
0543   DD 6E 02               LD   L,(IX+2)   ; peek loop limit
0546   DD 66 03               LD   H,(IX+3)   
0549   B7                     OR   A   
054A   ED 52                  SBC   HL,DE   
054C   28 0F                  JR   Z,again2   
054E   13                     INC   DE   
054F   DD 73 00               LD   (IX+0),E   ; poke loop var
0552   DD 72 01               LD   (IX+1),D   
0555   DD 4E 04               LD   C,(IX+4)   ; peek loop address
0558   DD 46 05               LD   B,(IX+5)   
055B   FD E9                  JP   (IY)   
055D                AGAIN2:      
055D   11 06 00               LD   DE,6   ; drop loop frame
0560                AGAIN3:      
0560   DD 19                  ADD   IX,DE   
0562   FD E9                  JP   (IY)   
0564                             ; **************************************************************************
0564                             ; def is used to create a colon definition
0564                             ; When a colon is detected, the next character (usually uppercase alpha)
0564                             ; is looked up in the vector table to get its associated code field address
0564                             ; This CFA is updated to point to the character after uppercase alpha
0564                             ; The remainder of the characters are then skipped until after a semicolon
0564                             ; is found.
0564                             ; ***************************************************************************
0564                             ;=31
0564                DEF:         ; Create a colon definition
0564   03                     INC   BC   
0565   0A                     LD   A,(BC)   ; Get the next character
0566   03                     INC   BC   
0567   D6 41                  SUB   "A"   
0569   32 08 0A               LD   (vLastDef),A   
056C   CD 7F 07               CALL   lookupDef2   
056F   ED 5B 0E 0A            LD   DE,(vHeapPtr)   ; start of defintion
0573   73                     LD   (HL),E   ; Save low byte of address in CFA
0574   23                     INC   HL   
0575   72                     LD   (HL),D   ; Save high byte of address in CFA+1
0576                DEF1:        ; Skip to end of definition
0576   0A                     LD   A,(BC)   ; Get the next character
0577   03                     INC   BC   ; Point to next character
0578   12                     LD   (DE),A   
0579   13                     INC   DE   
057A   FE 3B                  CP   ";"   ; Is it a semicolon
057C   28 02                  JR   Z,def2   ; end the definition
057E   18 F6                  JR   def1   ; get the next element
0580                DEF2:        
0580   0B                     DEC   BC   
0581                DEF3:        
0581   ED 53 0E 0A            LD   (vHeapPtr),DE   ; bump heap ptr to after definiton
0585   FD E9                  JP   (IY)   
0587                             ; ********************************************************************************
0587                             ; Number Handling Routine - converts numeric ascii string to a 16-bit number in HL
0587                             ; Read the first character.
0587                             ;			
0587                             ; Number characters ($30 to $39) are converted to digits by subtracting $30
0587                             ; and then added into the L register. (HL forms a 16-bit accumulator)
0587                             ; Fetch the next character, if it is a number, multiply contents of HL by 10
0587                             ; and then add in the next digit. Repeat this until a non-number character is
0587                             ; detected. Add in the final digit so that HL contains the converted number.
0587                             ; Push HL onto the stack and proceed to the dispatch routine.
0587                             ; ********************************************************************************
0587                NUM:         ;=23
0587   21 00 00               LD   HL,$0000   ;     Clear HL to accept the number
058A   0A                     LD   A,(BC)   ;     Get the character which is a numeral
058B                NUM1:        ; corrected KB 24/11/21
058B   D6 30                  SUB   $30   ;       Form decimal digit
058D   85                     ADD   A,L   ;       Add into bottom of HL
058E   6F                     LD   L,A   ; 
058F   3E 00                  LD   A,00   ;       Clear A
0591   8C                     ADC   A,H   ; Add with carry H-reg
0592   67                     LD   H,A   ; Put result in H-reg
0593   03                     INC   BC   ;       Increment IP
0594   0A                     LD   A,(BC)   ;       and get the next character
0595   FE 30                  CP   $30   ;       Less than $30
0597   38 0C                  JR   C,num2   ;       Not a number / end of number
0599   FE 3A                  CP   $3A   ;       Greater or equal to $3A
059B   30 08                  JR   NC,num2   ;       Not a number / end of number
059D                             ; Multiply digit(s) in HL by 10
059D   29                     ADD   HL,HL   ;        2X
059E   5D                     LD   E,L   ;        LD DE,HL
059F   54                     LD   D,H   ; 
05A0   29                     ADD   HL,HL   ;        4X
05A1   29                     ADD   HL,HL   ;        8X
05A2   19                     ADD   HL,DE   ;        2X  + 8X  = 10X
05A3                             ; 52t cycles
05A3   18 E6                  JR   num1   
05A5                NUM2:        
05A5   0B                     DEC   BC   
05A6   E5                     PUSH   HL   ;       Put the number on the stack
05A7   FD E9                  JP   (IY)   ; and process the next character
05A9                             ; *************************************
05A9                             ; Loop Handling Code
05A9                             ; *************************************
05A9                             ;=23
05A9                BEGIN:       ; Left parentesis begins a loop
05A9   E1                     POP   HL   
05AA   7D                     LD   A,L   ; zero?
05AB   B4                     OR   H   
05AC   28 1C                  JR   Z,begin1   
05AE   2B                     DEC   HL   
05AF   11 FA FF               LD   DE,-6   
05B2   DD 19                  ADD   IX,DE   
05B4   DD 36 00 00            LD   (IX+0),0   ; loop var
05B8   DD 36 01 00            LD   (IX+1),0   
05BC   DD 75 02               LD   (IX+2),L   ; loop limit
05BF   DD 74 03               LD   (IX+3),H   
05C2   DD 71 04               LD   (IX+4),C   ; loop address
05C5   DD 70 05               LD   (IX+5),B   
05C8   FD E9                  JP   (IY)   
05CA                BEGIN1:      
05CA   1E 01                  LD   E,1   
05CC                BEGIN2:      
05CC   03                     INC   BC   
05CD   0A                     LD   A,(BC)   
05CE   CD 5C 02               CALL   nesting   
05D1   AF                     XOR   A   
05D2   B3                     OR   E   
05D3   20 F7                  JR   NZ,begin2   
05D5                BEGIN3:      
05D5   FD E9                  JP   (IY)   
05D7                             ; ********************************************************************
05D7                             ; 16-bit division subroutine.
05D7                             ; 
05D7                             ; BC: divisor, DE: dividend, HL: remainder
05D7                             ; *********************************************************************
05D7                             ; This divides DE by BC, storing the result in DE, remainder in HL
05D7                             ; *********************************************************************
05D7                             ; 1382 cycles
05D7                             ; 35 bytes (reduced from 48)
05D7                             ; 
05D7                DIV:         ;=24
05D7   D1                     POP   DE   ; get first value
05D8   E1                     POP   HL   ; get 2nd value
05D9   C5                     PUSH   BC   ; Preserve the IP
05DA   44                     LD   B,H   ; BC = 2nd value
05DB   4D                     LD   C,L   
05DC                             ; 
05DC   21 00 00               LD   HL,0   ; Zero the remainder
05DF   3E 10                  LD   A,16   ; Loop counter
05E1                DIV1:        ;shift the bits from BC (numerator) into HL (accumulator)
05E1   CB 21                  SLA   C   
05E3   CB 10                  RL   B   
05E5   ED 6A                  ADC   HL,HL   
05E7   ED 52                  SBC   HL,DE   ;Check if remainder >= denominator (HL>=DE)
05E9   38 03                  JR   C,div2   
05EB   0C                     INC   C   
05EC   18 01                  JR   div3   
05EE                DIV2:        ; remainder is not >= denominator, so we have to add DE back to HL
05EE   19                     ADD   hl,de   
05EF                DIV3:        
05EF   3D                     DEC   A   
05F0   20 EF                  JR   NZ,div1   
05F2   50                     LD   D,B   ; Result from BC to DE
05F3   59                     LD   E,C   
05F4                DIV4:        
05F4   C1                     POP   BC   ; Restore the IP
05F5   D5                     PUSH   DE   ; Push Result
05F6   E5                     PUSH   HL   ; Push remainder
05F7   FD E9                  JP   (IY)   
05F9                             ; **************************************************************************
05F9                WRITECHAR:      
05F9   12                     LD   (DE),A   
05FA   13                     INC   DE   
05FB   C3 85 00               JP   putchar   
05FE                             ; **************************************************************************
05FE                             ; Page 6 Alt primitives
05FE                             ; **************************************************************************
05FE                          ALIGN   $100   
0600                PAGE6:       
0600                CARRDEF_:      ; define a byte array
0600   3E 01                  LD   A,TRUE   
0602   C3 2A 04               JP   arrDef1   
0605                CFETCH_:      
0605   E1                     POP   HL   
0606   16 00                  LD   D,0   
0608   5E                     LD   E,(HL)   
0609   D5                     PUSH   DE   
060A                ANOP_:       
060A   FD E9                  JP   (IY)   
060C                CHARCODE_:      
060C   03                     INC   BC   
060D   0A                     LD   A,(BC)   
060E   C3 9A 06               JP   key1   
0611                COMMENT_:      
0611   03                     INC   BC   ; point to next char
0612   0A                     LD   A,(BC)   
0613   FE 0D                  CP   "\r"   ; terminate at cr
0615   20 FA                  JR   NZ,comment_   
0617   0B                     DEC   BC   
0618   FD E9                  JP   (IY)   
061A                CSTORE_:      
061A   E1                     POP   HL   
061B   D1                     POP   DE   
061C   73                     LD   (HL),E   
061D   FD E9                  JP   (IY)   
061F                DEPTH_:      
061F   21 00 00               LD   HL,0   
0622   39                     ADD   HL,SP   
0623   EB                     EX   DE,HL   
0624   21 80 08               LD   HL,DSTACK   
0627   B7                     OR   A   
0628   ED 52                  SBC   HL,DE   
062A   C3 A8 04               JP   shr1   
062D                EMIT_:       
062D   E1                     POP   HL   
062E   7D                     LD   A,L   
062F   CD 85 00               CALL   putchar   
0632   FD E9                  JP   (IY)   
0634                IFTE_:       
0634   D1                     POP   DE   
0635   7B                     LD   A,E   
0636   B2                     OR   D   
0637   20 05                  JR   NZ,ifte1   
0639   13                     INC   DE   
063A   D5                     PUSH   DE   ; push TRUE on stack for else clause
063B   C3 CA 05               JP   begin1   ; skip to closing ) works with \) too
063E                IFTE1:       
063E   21 FF FF               LD   HL,-1   ; push -1 on return stack to indicate IFTEMode
0641   CD D9 07               CALL   rpush   
0644   FD E9                  JP   (IY)   
0646                EXEC_:       
0646   CD 4B 06               CALL   exec1   
0649   FD E9                  JP   (IY)   
064B                EXEC1:       
064B   E1                     POP   HL   
064C   E3                     EX   (SP),HL   
064D   E9                     JP   (HL)   
064E                GO_:         
064E   60 69                  LD   HL,BC   
0650   CD D9 07               CALL   rpush   ; save Instruction Pointer
0653   C1                     POP   BC   
0654   0B                     DEC   BC   
0655   FD E9                  JP   (IY)   
0657                NSCALL_:      ;=25
0657   FD 21 EE 07            LD   IY,rpop2   ; rewire NEXT to simply return
065B   CD 56 07               CALL   NSEnter1   ; enter namespace return here on NEXT
065E   0A                     LD   A,(BC)   
065F   CD 7D 07               CALL   lookupDef   
0662   E5                     PUSH   HL   
0663   FD 21 40 02            LD   IY,NEXT   ; restore NEXT
0667   CD 74 07               CALL   enter   ; enter MINT interpreter with TOS=command
066A   40 5C 47 00            .CSTR   "@\\G"   ; execute and restore namespace
066E                NSEXIT_:      
066E   CD E4 07               CALL   rpop   
0671   22 06 0A               LD   (vDEFS),HL   
0674   FD E9                  JP   (IY)   
0676                NSENTER_:      
0676   C3 55 07               JP   NSEnter   
0679                PROMPT_:      
0679   CD 88 02               CALL   prompt   
067C   FD E9                  JP   (IY)   
067E                SYSVAR_:      
067E   0A                     LD   A,(BC)   
067F   D6 61                  SUB   "a" - ((sysVars - mintVars)/2)   
0681   87                     ADD   A,A   
0682   26 0A                  LD   H,msb(mintVars)   
0684   6F                     LD   L,A   
0685   E5                     PUSH   HL   
0686   FD E9                  JP   (IY)   
0688                I_:          
0688   DD E5                  PUSH   IX   
068A   FD E9                  JP   (IY)   
068C                INPORT_:      
068C   E1                     POP   HL   
068D   79                     LD   A,C   
068E   4D                     LD   C,L   
068F   ED 68                  IN   L,(C)   
0691   26 00                  LD   H,0   
0693   4F                     LD   C,A   
0694   E5                     PUSH   HL   
0695   FD E9                  JP   (IY)   
0697                KEY_:        
0697   CD 81 00               CALL   getchar   
069A                KEY1:        
069A   26 00                  LD   H,0   
069C   6F                     LD   L,A   
069D   E5                     PUSH   HL   
069E   FD E9                  JP   (IY)   
06A0                NEWLN_:      
06A0   CD 9D 02               CALL   crlf   
06A3   FD E9                  JP   (IY)   
06A5                OUTPORT_:      
06A5   E1                     POP   HL   
06A6   59                     LD   E,C   
06A7   4D                     LD   C,L   
06A8   E1                     POP   HL   
06A9   ED 69                  OUT   (C),L   
06AB   4B                     LD   C,E   
06AC   FD E9                  JP   (IY)   
06AE                ROT_:        ; a b c -- b c a
06AE   D1                     POP   DE   ; a b                   de = c
06AF   E1                     POP   HL   ; a                     hl = b
06B0   E3                     EX   (SP),HL   ; b                     hl = a
06B1   D5                     PUSH   DE   ; b c
06B2   E5                     PUSH   HL   ; b c a
06B3   FD E9                  JP   (IY)   
06B5                BREAK_:      
06B5   E1                     POP   HL   
06B6   7D                     LD   A,L   ; zero?
06B7   B4                     OR   H   
06B8   20 02                  JR   NZ,break1   
06BA   FD E9                  JP   (IY)   
06BC                BREAK1:      
06BC   11 06 00               LD   DE,6   ; drop loop frame
06BF   DD 19                  ADD   IX,DE   
06C1   C3 CA 05               JP   begin1   ; skip to end of loop
06C4                PRINTSTK_:      
06C4   18 36                  JR   printStk   
06C6                EDITDEF_:      
06C6                             ; **************************************************************************
06C6                             ; Page 6 primitive routines
06C6                             ; **************************************************************************
06C6                             ; falls through
06C6                             ; **************************************************************************
06C6                             ; copy definition to text input buffer
06C6                             ; update TIBPtr
06C6                             ; **************************************************************************
06C6                EDITDEF:      ; lookup up def based on number
06C6   3E 41                  LD   A,"A"   
06C8   D1                     POP   DE   
06C9   83                     ADD   A,E   
06CA   08                     EX   AF,AF'   
06CB   2A 06 0A               LD   HL,(vDEFS)   
06CE   19                     ADD   HL,DE   
06CF   19                     ADD   HL,DE   
06D0   5E                     LD   E,(HL)   
06D1   23                     INC   HL   
06D2   56                     LD   D,(HL)   
06D3   EB                     EX   DE,HL   
06D4   7E                     LD   A,(HL)   
06D5   FE 3B                  CP   ";"   
06D7   11 00 09               LD   DE,TIB   
06DA   28 14                  JR   Z,editDef3   
06DC   3E 3A                  LD   A,":"   
06DE   CD F9 05               CALL   writeChar   
06E1   08                     EX   AF,AF'   
06E2   CD F9 05               CALL   writeChar   
06E5   18 01                  JR   editDef2   
06E7                EDITDEF1:      
06E7   23                     INC   HL   
06E8                EDITDEF2:      
06E8   7E                     LD   A,(HL)   
06E9   CD F9 05               CALL   writeChar   
06EC   FE 3B                  CP   ";"   
06EE   20 F7                  JR   NZ,editDef1   
06F0                EDITDEF3:      
06F0   21 00 09               LD   HL,TIB   
06F3   EB                     EX   DE,HL   
06F4   B7                     OR   A   
06F5   ED 52                  SBC   HL,DE   
06F7   22 04 0A               LD   (vTIBPtr),HL   
06FA   FD E9                  JP   (IY)   
06FC                PRINTSTK:      ;=40
06FC   CD 74 07               CALL   ENTER   
06FF   5C 61 40 32 2D 5C 44 31 2D 28 22 40 5C 62 40 5C 28 2C 29 28 2E 29 32 2D 29 27 00 .CSTR   "\\a@2-\\D1-(",$22,"@\\b@\\(,)(.)2-)'"   
071A   FD E9                  JP   (IY)   
071C                             ;*******************************************************************
071C                             ; Page 5 primitive routines continued
071C                             ;*******************************************************************
071C                ARREND:      ;=27
071C   CD E4 07               CALL   rpop   ; DE = start of array
071F   E5                     PUSH   HL   
0720   EB                     EX   DE,HL   
0721   2A 0E 0A               LD   HL,(vHeapPtr)   ; HL = heap ptr
0724   B7                     OR   A   
0725   ED 52                  SBC   HL,DE   ; bytes on heap
0727   3A 36 0A               LD   A,(vByteMode)   
072A   B7                     OR   A   
072B   20 04                  JR   NZ,arrEnd2   
072D   CB 3C                  SRL   H   ; BC = m words
072F   CB 1D                  RR   L   
0731                ARREND2:      
0731   E5                     PUSH   HL   
0732   FD 21 40 02            LD   IY,NEXT   
0736   FD E9                  JP   (IY)   ; hardwired to NEXT
0738                HEX:         ;=26
0738   21 00 00               LD   HL,0   ;     Clear HL to accept the number
073B                HEX1:        
073B   03                     INC   BC   
073C   0A                     LD   A,(BC)   ;     Get the character which is a numeral
073D   CB 77                  BIT   6,A   ;       is it uppercase alpha?
073F   28 02                  JR   Z,hex2   ; no a decimal
0741   D6 07                  SUB   7   ; sub 7  to make $A - $F
0743                HEX2:        
0743   D6 30                  SUB   $30   ;       Form decimal digit
0745   DA A5 05               JP   C,num2   
0748   FE 10                  CP   $0F+1   
074A   D2 A5 05               JP   NC,num2   
074D   29                     ADD   HL,HL   ;        2X ; Multiply digit(s) in HL by 16
074E   29                     ADD   HL,HL   ;        4X
074F   29                     ADD   HL,HL   ;        8X
0750   29                     ADD   HL,HL   ;       16X
0751   85                     ADD   A,L   ;       Add into bottom of HL
0752   6F                     LD   L,A   ; 
0753   18 E6                  JR   hex1   
0755                NSENTER:      ;=26
0755   03                     INC   BC   
0756                NSENTER1:      
0756   0A                     LD   A,(BC)   ; read NS ASCII code
0757   D6 30                  SUB   "0"   ; convert to number
0759   03                     INC   BC   
075A   57                     LD   D,A   ; multiply by 64
075B   1E 00                  LD   E,0   
075D   CB 3A                  SRL   D   
075F   CB 1B                  RR   E   
0761   CB 3A                  SRL   D   
0763   CB 1B                  RR   E   
0765   2A 06 0A               LD   HL,(vDEFS)   ; 
0768   CD D9 07               CALL   rpush   
076B   21 C0 0A               LD   HL,DEFS   
076E   19                     ADD   HL,DE   
076F   22 06 0A               LD   (vDEFS),HL   
0772   FD E9                  JP   (IY)   
0774                             ;*******************************************************************
0774                             ; Subroutines
0774                             ;*******************************************************************
0774                ENTER:       ;=9
0774   60 69                  LD   HL,BC   
0776   CD D9 07               CALL   rpush   ; save Instruction Pointer
0779   C1                     POP   BC   
077A   0B                     DEC   BC   
077B   FD E9                  JP   (IY)   
077D                LOOKUPDEF:      
077D   D6 41                  SUB   "A"   
077F                LOOKUPDEF2:      
077F   87                     ADD   A,A   
0780   5F                     LD   E,A   
0781   16 00                  LD   D,0   
0783   2A 06 0A               LD   HL,(vDEFS)   
0786   19                     ADD   HL,DE   
0787   C9                     RET      
0788                PRINTSTR:      ;=14
0788   E3                     EX   (SP),HL   
0789   18 04                  JR   printStr2   
078B                PRINTSTR1:      
078B   CD 85 00               CALL   putchar   
078E   23                     INC   HL   
078F                PRINTSTR2:      
078F   7E                     LD   A,(HL)   
0790   B7                     OR   A   
0791   20 F8                  JR   NZ,printStr1   
0793   23                     INC   HL   
0794   E3                     EX   (SP),HL   
0795   C9                     RET      
0796                PRINTDEC:      ;=36
0796   11 F0 D8               LD   DE,-10000   
0799   CD AF 07               CALL   printdec1   
079C   11 18 FC               LD   DE,-1000   
079F   CD AF 07               CALL   printdec1   
07A2   11 9C FF               LD   DE,-100   
07A5   CD AF 07               CALL   printdec1   
07A8   1E F6                  LD   E,-10   
07AA   CD AF 07               CALL   printdec1   
07AD   1E FF                  LD   E,-1   
07AF                PRINTDEC1:      
07AF   3E 2F                  LD   A,"0"-1   
07B1                PRINTDEC2:      
07B1   3C                     INC   A   
07B2   19                     ADD   HL,DE   
07B3   38 FC                  JR   C,printdec2   
07B5   ED 52                  SBC   HL,DE   
07B7   C3 85 00               JP   putchar   
07BA                PRINTHEX:      ;=11
07BA                             ; Display HL as a 16-bit number in hex.
07BA   C5                     PUSH   BC   ; preserve the IP
07BB   7C                     LD   A,H   
07BC   CD C5 07               CALL   printhex2   
07BF   7D                     LD   A,L   
07C0   CD C5 07               CALL   printhex2   
07C3   C1                     POP   BC   
07C4   C9                     RET      
07C5                PRINTHEX2:      ;=20
07C5   4F                     LD   C,A   
07C6   1F                     RRA      
07C7   1F                     RRA      
07C8   1F                     RRA      
07C9   1F                     RRA      
07CA   CD CE 07               CALL   printhex3   
07CD   79                     LD   A,C   
07CE                PRINTHEX3:      
07CE   E6 0F                  AND   0x0F   
07D0   C6 90                  ADD   A,0x90   
07D2   27                     DAA      
07D3   CE 40                  ADC   A,0x40   
07D5   27                     DAA      
07D6   C3 85 00               JP   putchar   
07D9                RPUSH:       ;=11
07D9   DD 2B                  DEC   IX   
07DB   DD 74 00               LD   (IX+0),H   
07DE   DD 2B                  DEC   IX   
07E0   DD 75 00               LD   (IX+0),L   
07E3   C9                     RET      
07E4                RPOP:        ;=11
07E4   DD 6E 00               LD   L,(IX+0)   
07E7   DD 23                  INC   IX   
07E9   DD 66 00               LD   H,(IX+0)   
07EC   DD 23                  INC   IX   
07EE                RPOP2:       
07EE   C9                     RET      
0800                          .ORG   RAMSTART   
0800                          DS   DSIZE   
0880                STACK:       
0880                DSTACK:      
0880                          DS   RSIZE   
0900                RSTACK:      
0900                TIB:      DS   TIBSIZE   
0A00                          ALIGN   $100   
0A00                MINTVARS:      
0A00                SYSVARS:      
0A00                VS0:      DS   2   ; a
0A02                VBASE16:   DS   2   ; b
0A04                VTIBPTR:   DS   2   ; c
0A06                VDEFS:    DS   2   ; d
0A08                VLASTDEF:   DS   2   ; e
0A0A                          DS   2   ; f
0A0C                          DS   2   ; g
0A0E                VHEAPPTR:   DS   2   ; h
0A10                          DS   2   ; i
0A12                          DS   2   ; j
0A14                          DS   2   ; k
0A16                          DS   2   ; l
0A18                          DS   2   ; m
0A1A                          DS   2   ; n
0A1C                          DS   2   ; o
0A1E                          DS   2   ; p
0A20                          DS   2   ; q
0A22                          DS   2   ; r
0A24                          DS   2   ; s
0A26                          DS   2   ; t
0A28                          DS   2   ; u
0A2A                          DS   2   ; v
0A2C                          DS   2   ; w
0A2E                          DS   2   ; x
0A30                          DS   2   ; y
0A32                          DS   2   ; z
0A34                          DS   2   ; 
0A36                VBYTEMODE:   DS   2   ; 
0A38                          DS   $30   
0A68                TBPTR:    DS   2   ; reserved for tests
0A6A                RST08:    DS   2   
0A6C                RST10:    DS   2   
0A6E                RST18:    DS   2   
0A70                RST20:    DS   2   
0A72                RST28:    DS   2   
0A74                RST30:    DS   2   ; 
0A76                BAUD:     DS   2   ; 
0A78                INTVEC:   DS   2   ; 
0A7A                NMIVEC:   DS   2   ; 
0A7C                GETCVEC:   DS   2   ; 
0A7E                PUTCVEC:   DS   2   ; 
0A80                             ; ****************************************************************
0A80                             ; VARS Table - holds 26 16-bit user variables
0A80                             ; ****************************************************************
0A80                VARS:     DS   26 * 2   
0AB4                             ; ****************************************************************
0AB4                             ; DEFS Table - holds 26 addresses of user routines
0AB4                             ; ****************************************************************
0AB4                          ALIGN   $40   
0AB4                          .ORG   $-12   
0AB4                          DS   12   ; vars for group 0
0AC0                DEFS:     DS   NSSIZE * NSNUM   
0C00                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 26 IN MINT.asm
RAMSTART:           0800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 110 IN MINT.asm
                    > USED AT LINE 1160 IN MINT.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 125 IN MINT.asm
                    > USED AT LINE 628 IN MINT.asm
                    > USED AT LINE 782 IN MINT.asm
                    > USED AT LINE 1032 IN MINT.asm
                    > USED AT LINE 1084 IN MINT.asm
                    > USED AT LINE 1340 IN MINT.asm
                    > USED AT LINE 1368 IN MINT.asm
                    > USED AT LINE 1394 IN MINT.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 13 IN MINT.asm
                    > USED AT LINE 3 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 14 IN MINT.asm
                    > USED AT LINE 7 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 15 IN MINT.asm
                    > USED AT LINE 10 IN ram.asm
TRUE:               0001 DEFINED AT LINE 16 IN MINT.asm
                    > USED AT LINE 1042 IN MINT.asm
FALSE:              0000 DEFINED AT LINE 17 IN MINT.asm
                    > USED AT LINE 40 IN MINT.asm
                    > USED AT LINE 595 IN MINT.asm
NSNUM:              0005 DEFINED AT LINE 19 IN MINT.asm
                    > USED AT LINE 57 IN MINT.asm
                    > USED AT LINE 70 IN ram.asm
NSSIZE:             0040 DEFINED AT LINE 20 IN MINT.asm
                    > USED AT LINE 57 IN MINT.asm
                    > USED AT LINE 70 IN ram.asm
START:              0180 DEFINED AT LINE 28 IN MINT.asm
                    > USED AT LINE 6
ISYSVARS:           0197 DEFINED AT LINE 38 IN MINT.asm
                    > USED AT LINE 51 IN MINT.asm
INITIALIZE:         01A7 DEFINED AT LINE 48 IN MINT.asm
                    > USED AT LINE 30 IN MINT.asm
INIT1:              01BF DEFINED AT LINE 58 IN MINT.asm
                    > USED AT LINE 63 IN MINT.asm
MACRO:              01C8 DEFINED AT LINE 66 IN MINT.asm
                    > USED AT LINE 118 IN MINT.asm
INTERPRET:          01E1 DEFINED AT LINE 79 IN MINT.asm
                    > USED AT LINE 33 IN MINT.asm
                    > USED AT LINE 251 IN MINT.asm
INTERPRET2:         01EB DEFINED AT LINE 85 IN MINT.asm
                    > USED AT LINE 77 IN MINT.asm
INTERPRET3:         01F3 DEFINED AT LINE 92 IN MINT.asm
                    > USED AT LINE 101 IN MINT.asm
INTERPRET4:         01F9 DEFINED AT LINE 98 IN MINT.asm
                    > USED AT LINE 90 IN MINT.asm
WAITCHAR:           01FE DEFINED AT LINE 109 IN MINT.asm
                    > USED AT LINE 127 IN MINT.asm
                    > USED AT LINE 141 IN MINT.asm
WAITCHAR1:          0211 DEFINED AT LINE 120 IN MINT.asm
                    > USED AT LINE 112 IN MINT.asm
WAITCHAR3:          021F DEFINED AT LINE 129 IN MINT.asm
                    > USED AT LINE 116 IN MINT.asm
WAITCHAR4:          0235 DEFINED AT LINE 145 IN MINT.asm
                    > USED AT LINE 114 IN MINT.asm
NEXT:               0240 DEFINED AT LINE 173 IN MINT.asm
                    > USED AT LINE 50 IN MINT.asm
                    > USED AT LINE 149 IN MINT.asm
                    > USED AT LINE 195 IN MINT.asm
                    > USED AT LINE 601 IN MINT.asm
                    > USED AT LINE 662 IN MINT.asm
                    > USED AT LINE 1121 IN MINT.asm
                    > USED AT LINE 1270 IN MINT.asm
COMPNEXT:           0249 DEFINED AT LINE 183 IN MINT.asm
                    > USED AT LINE 597 IN MINT.asm
COMPNEXT1:          0257 DEFINED AT LINE 193 IN MINT.asm
                    > USED AT LINE 190 IN MINT.asm
NESTING:            025C DEFINED AT LINE 207 IN MINT.asm
                    > USED AT LINE 96 IN MINT.asm
                    > USED AT LINE 126 IN MINT.asm
                    > USED AT LINE 975 IN MINT.asm
NESTING1A:          0267 DEFINED AT LINE 214 IN MINT.asm
                    > USED AT LINE 211 IN MINT.asm
NESTING1:           026A DEFINED AT LINE 217 IN MINT.asm
                    > USED AT LINE 209 IN MINT.asm
NESTING2:           0279 DEFINED AT LINE 226 IN MINT.asm
                    > USED AT LINE 221 IN MINT.asm
                    > USED AT LINE 223 IN MINT.asm
NESTING3:           027B DEFINED AT LINE 229 IN MINT.asm
                    > USED AT LINE 225 IN MINT.asm
NESTING4:           0286 DEFINED AT LINE 236 IN MINT.asm
                    > USED AT LINE 231 IN MINT.asm
                    > USED AT LINE 233 IN MINT.asm
PROMPT:             0288 DEFINED AT LINE 240 IN MINT.asm
                    > USED AT LINE 80 IN MINT.asm
                    > USED AT LINE 1133 IN MINT.asm
ETX:                0291 DEFINED AT LINE 245 IN MINT.asm
                    > USED AT LINE 641 IN MINT.asm
ETX1:               029A DEFINED AT LINE 250 IN MINT.asm
                    > USED AT LINE 248 IN MINT.asm
CRLF:               029D DEFINED AT LINE 253 IN MINT.asm
                    > USED AT LINE 138 IN MINT.asm
                    > USED AT LINE 1168 IN MINT.asm
MACROS:             02A4 DEFINED AT LINE 262 IN MINT.asm
EMPTY_:             02A4 DEFINED AT LINE 1 IN MINT.asm
BACKSP_:            02A5 DEFINED AT LINE 4 IN MINT.asm
REEDIT_:            02BA DEFINED AT LINE 7 IN MINT.asm
EDIT_:              02C1 DEFINED AT LINE 10 IN MINT.asm
LIST_:              02D0 DEFINED AT LINE 13 IN MINT.asm
PRINTSTACK_:        02E8 DEFINED AT LINE 16 IN MINT.asm
TOGGLEBASE_:        02F5 DEFINED AT LINE 19 IN MINT.asm
OPCODES:            0300 DEFINED AT LINE 271 IN MINT.asm
CTRLCODES:          0380 DEFINED AT LINE 408 IN MINT.asm
                    > USED AT LINE 68 IN MINT.asm
ALTCODES:           0380 DEFINED AT LINE 409 IN MINT.asm
                    > USED AT LINE 803 IN MINT.asm
PAGE4:              0400 DEFINED AT LINE 544 IN MINT.asm
AND_:               0400 DEFINED AT LINE 546 IN MINT.asm
AND1:               0407 DEFINED AT LINE 554 IN MINT.asm
                    > USED AT LINE 568 IN MINT.asm
                    > USED AT LINE 579 IN MINT.asm
OR_:                040B DEFINED AT LINE 560 IN MINT.asm
XOR_:               0414 DEFINED AT LINE 570 IN MINT.asm
XOR1:               0415 DEFINED AT LINE 572 IN MINT.asm
                    > USED AT LINE 583 IN MINT.asm
INV_:               041D DEFINED AT LINE 581 IN MINT.asm
ADD_:               0422 DEFINED AT LINE 585 IN MINT.asm
ARRDEF_:            0428 DEFINED AT LINE 593 IN MINT.asm
ARRDEF:             0428 DEFINED AT LINE 594 IN MINT.asm
ARRDEF1:            042A DEFINED AT LINE 596 IN MINT.asm
                    > USED AT LINE 1043 IN MINT.asm
ARREND_:            043A DEFINED AT LINE 603 IN MINT.asm
BEGIN_:             043D DEFINED AT LINE 604 IN MINT.asm
CALL_:              0440 DEFINED AT LINE 605 IN MINT.asm
DEF_:               044F DEFINED AT LINE 617 IN MINT.asm
HDOT_:              0452 DEFINED AT LINE 619 IN MINT.asm
DOT_:               0458 DEFINED AT LINE 623 IN MINT.asm
DOT2:               045C DEFINED AT LINE 626 IN MINT.asm
                    > USED AT LINE 622 IN MINT.asm
DROP_:              0463 DEFINED AT LINE 631 IN MINT.asm
DUP_:               0466 DEFINED AT LINE 635 IN MINT.asm
ETX_:               046B DEFINED AT LINE 640 IN MINT.asm
EXIT_:              046E DEFINED AT LINE 643 IN MINT.asm
FETCH_:             0478 DEFINED AT LINE 651 IN MINT.asm
FETCH1:             0479 DEFINED AT LINE 653 IN MINT.asm
                    > USED AT LINE 798 IN MINT.asm
HEX_:               047F DEFINED AT LINE 660 IN MINT.asm
NOP_:               0482 DEFINED AT LINE 662 IN MINT.asm
NUM_:               0485 DEFINED AT LINE 664 IN MINT.asm
OVER_:              0488 DEFINED AT LINE 667 IN MINT.asm
RET_:               048F DEFINED AT LINE 675 IN MINT.asm
STORE_:             0496 DEFINED AT LINE 680 IN MINT.asm
SWAP_:              049D DEFINED AT LINE 689 IN MINT.asm
SHL_:               04A2 DEFINED AT LINE 696 IN MINT.asm
SHR_:               04A7 DEFINED AT LINE 703 IN MINT.asm
SHR1:               04A8 DEFINED AT LINE 705 IN MINT.asm
                    > USED AT LINE 1079 IN MINT.asm
NEG_:               04AF DEFINED AT LINE 711 IN MINT.asm
SUB_:               04B5 DEFINED AT LINE 715 IN MINT.asm
SUB_1:              04B6 DEFINED AT LINE 718 IN MINT.asm
SUB_2:              04B7 DEFINED AT LINE 719 IN MINT.asm
                    > USED AT LINE 713 IN MINT.asm
EQ_:                04BD DEFINED AT LINE 724 IN MINT.asm
GT_:                04C9 DEFINED AT LINE 732 IN MINT.asm
LT_:                04CD DEFINED AT LINE 736 IN MINT.asm
CMP_:               04CF DEFINED AT LINE 738 IN MINT.asm
                    > USED AT LINE 734 IN MINT.asm
EQUAL:              04DA DEFINED AT LINE 743 IN MINT.asm
                    > USED AT LINE 728 IN MINT.asm
LESS:               04DB DEFINED AT LINE 744 IN MINT.asm
                    > USED AT LINE 730 IN MINT.asm
                    > USED AT LINE 740 IN MINT.asm
                    > USED AT LINE 742 IN MINT.asm
VAR_:               04DE DEFINED AT LINE 748 IN MINT.asm
DIV_:               04E8 DEFINED AT LINE 758 IN MINT.asm
MUL_:               04EB DEFINED AT LINE 761 IN MINT.asm
AGAIN_:             04ED DEFINED AT LINE 764 IN MINT.asm
GETREF_:            04EF DEFINED AT LINE 767 IN MINT.asm
ALT_:               04F1 DEFINED AT LINE 770 IN MINT.asm
STR_:               04F3 DEFINED AT LINE 773 IN MINT.asm
STR:                04F3 DEFINED AT LINE 774 IN MINT.asm
STR1:               04F4 DEFINED AT LINE 777 IN MINT.asm
                    > USED AT LINE 783 IN MINT.asm
STR2:               04FF DEFINED AT LINE 785 IN MINT.asm
                    > USED AT LINE 781 IN MINT.asm
GETREF:             0502 DEFINED AT LINE 794 IN MINT.asm
                    > USED AT LINE 768 IN MINT.asm
ALT:                050A DEFINED AT LINE 800 IN MINT.asm
                    > USED AT LINE 771 IN MINT.asm
MUL:                0515 DEFINED AT LINE 812 IN MINT.asm
                    > USED AT LINE 762 IN MINT.asm
MUL2:               051F DEFINED AT LINE 821 IN MINT.asm
                    > USED AT LINE 830 IN MINT.asm
AGAIN:              0531 DEFINED AT LINE 835 IN MINT.asm
                    > USED AT LINE 765 IN MINT.asm
AGAIN1:             0543 DEFINED AT LINE 848 IN MINT.asm
                    > USED AT LINE 842 IN MINT.asm
AGAIN2:             055D DEFINED AT LINE 860 IN MINT.asm
                    > USED AT LINE 853 IN MINT.asm
AGAIN3:             0560 DEFINED AT LINE 862 IN MINT.asm
                    > USED AT LINE 846 IN MINT.asm
DEF:                0564 DEFINED AT LINE 875 IN MINT.asm
                    > USED AT LINE 617 IN MINT.asm
DEF1:               0576 DEFINED AT LINE 886 IN MINT.asm
                    > USED AT LINE 893 IN MINT.asm
DEF2:               0580 DEFINED AT LINE 895 IN MINT.asm
                    > USED AT LINE 892 IN MINT.asm
DEF3:               0581 DEFINED AT LINE 897 IN MINT.asm
NUM:                0587 DEFINED AT LINE 913 IN MINT.asm
                    > USED AT LINE 665 IN MINT.asm
NUM1:               058B DEFINED AT LINE 917 IN MINT.asm
                    > USED AT LINE 941 IN MINT.asm
NUM2:               05A5 DEFINED AT LINE 943 IN MINT.asm
                    > USED AT LINE 929 IN MINT.asm
                    > USED AT LINE 931 IN MINT.asm
                    > USED AT LINE 1283 IN MINT.asm
                    > USED AT LINE 1285 IN MINT.asm
BEGIN:              05A9 DEFINED AT LINE 953 IN MINT.asm
                    > USED AT LINE 604 IN MINT.asm
BEGIN1:             05CA DEFINED AT LINE 970 IN MINT.asm
                    > USED AT LINE 957 IN MINT.asm
                    > USED AT LINE 1094 IN MINT.asm
                    > USED AT LINE 1197 IN MINT.asm
BEGIN2:             05CC DEFINED AT LINE 972 IN MINT.asm
                    > USED AT LINE 978 IN MINT.asm
BEGIN3:             05D5 DEFINED AT LINE 979 IN MINT.asm
DIV:                05D7 DEFINED AT LINE 995 IN MINT.asm
                    > USED AT LINE 759 IN MINT.asm
DIV1:               05E1 DEFINED AT LINE 1005 IN MINT.asm
                    > USED AT LINE 1018 IN MINT.asm
DIV2:               05EE DEFINED AT LINE 1014 IN MINT.asm
                    > USED AT LINE 1011 IN MINT.asm
DIV3:               05EF DEFINED AT LINE 1016 IN MINT.asm
                    > USED AT LINE 1013 IN MINT.asm
DIV4:               05F4 DEFINED AT LINE 1021 IN MINT.asm
WRITECHAR:          05F9 DEFINED AT LINE 1029 IN MINT.asm
                    > USED AT LINE 1228 IN MINT.asm
                    > USED AT LINE 1230 IN MINT.asm
                    > USED AT LINE 1236 IN MINT.asm
PAGE6:              0600 DEFINED AT LINE 1039 IN MINT.asm
CARRDEF_:           0600 DEFINED AT LINE 1041 IN MINT.asm
CFETCH_:            0605 DEFINED AT LINE 1045 IN MINT.asm
ANOP_:              060A DEFINED AT LINE 1050 IN MINT.asm
CHARCODE_:          060C DEFINED AT LINE 1053 IN MINT.asm
COMMENT_:           0611 DEFINED AT LINE 1058 IN MINT.asm
                    > USED AT LINE 1062 IN MINT.asm
CSTORE_:            061A DEFINED AT LINE 1066 IN MINT.asm
DEPTH_:             061F DEFINED AT LINE 1072 IN MINT.asm
EMIT_:              062D DEFINED AT LINE 1081 IN MINT.asm
IFTE_:              0634 DEFINED AT LINE 1087 IN MINT.asm
IFTE1:              063E DEFINED AT LINE 1095 IN MINT.asm
                    > USED AT LINE 1091 IN MINT.asm
EXEC_:              0646 DEFINED AT LINE 1100 IN MINT.asm
EXEC1:              064B DEFINED AT LINE 1103 IN MINT.asm
                    > USED AT LINE 1101 IN MINT.asm
GO_:                064E DEFINED AT LINE 1108 IN MINT.asm
NSCALL_:            0657 DEFINED AT LINE 1115 IN MINT.asm
NSEXIT_:            066E DEFINED AT LINE 1124 IN MINT.asm
NSENTER_:           0676 DEFINED AT LINE 1129 IN MINT.asm
PROMPT_:            0679 DEFINED AT LINE 1132 IN MINT.asm
SYSVAR_:            067E DEFINED AT LINE 1136 IN MINT.asm
I_:                 0688 DEFINED AT LINE 1145 IN MINT.asm
INPORT_:            068C DEFINED AT LINE 1149 IN MINT.asm
KEY_:               0697 DEFINED AT LINE 1159 IN MINT.asm
KEY1:               069A DEFINED AT LINE 1161 IN MINT.asm
                    > USED AT LINE 1056 IN MINT.asm
NEWLN_:             06A0 DEFINED AT LINE 1167 IN MINT.asm
OUTPORT_:           06A5 DEFINED AT LINE 1171 IN MINT.asm
ROT_:               06AE DEFINED AT LINE 1180 IN MINT.asm
BREAK_:             06B5 DEFINED AT LINE 1188 IN MINT.asm
BREAK1:             06BC DEFINED AT LINE 1194 IN MINT.asm
                    > USED AT LINE 1192 IN MINT.asm
PRINTSTK_:          06C4 DEFINED AT LINE 1199 IN MINT.asm
EDITDEF_:           06C6 DEFINED AT LINE 1201 IN MINT.asm
EDITDEF:            06C6 DEFINED AT LINE 1211 IN MINT.asm
EDITDEF1:           06E7 DEFINED AT LINE 1232 IN MINT.asm
                    > USED AT LINE 1238 IN MINT.asm
EDITDEF2:           06E8 DEFINED AT LINE 1234 IN MINT.asm
                    > USED AT LINE 1231 IN MINT.asm
EDITDEF3:           06F0 DEFINED AT LINE 1239 IN MINT.asm
                    > USED AT LINE 1226 IN MINT.asm
PRINTSTK:           06FC DEFINED AT LINE 1247 IN MINT.asm
                    > USED AT LINE 1200 IN MINT.asm
ARREND:             071C DEFINED AT LINE 1256 IN MINT.asm
                    > USED AT LINE 603 IN MINT.asm
ARREND2:            0731 DEFINED AT LINE 1268 IN MINT.asm
                    > USED AT LINE 1265 IN MINT.asm
HEX:                0738 DEFINED AT LINE 1273 IN MINT.asm
                    > USED AT LINE 660 IN MINT.asm
HEX1:               073B DEFINED AT LINE 1275 IN MINT.asm
                    > USED AT LINE 1292 IN MINT.asm
HEX2:               0743 DEFINED AT LINE 1281 IN MINT.asm
                    > USED AT LINE 1279 IN MINT.asm
NSENTER:            0755 DEFINED AT LINE 1294 IN MINT.asm
                    > USED AT LINE 1130 IN MINT.asm
NSENTER1:           0756 DEFINED AT LINE 1296 IN MINT.asm
                    > USED AT LINE 1117 IN MINT.asm
ENTER:              0774 DEFINED AT LINE 1318 IN MINT.asm
                    > USED AT LINE 74 IN MINT.asm
                    > USED AT LINE 1122 IN MINT.asm
                    > USED AT LINE 1248 IN MINT.asm
LOOKUPDEF:          077D DEFINED AT LINE 1325 IN MINT.asm
                    > USED AT LINE 609 IN MINT.asm
                    > USED AT LINE 797 IN MINT.asm
                    > USED AT LINE 1119 IN MINT.asm
LOOKUPDEF2:         077F DEFINED AT LINE 1327 IN MINT.asm
                    > USED AT LINE 881 IN MINT.asm
PRINTSTR:           0788 DEFINED AT LINE 1335 IN MINT.asm
                    > USED AT LINE 31 IN MINT.asm
                    > USED AT LINE 241 IN MINT.asm
                    > USED AT LINE 254 IN MINT.asm
PRINTSTR1:          078B DEFINED AT LINE 1339 IN MINT.asm
                    > USED AT LINE 1346 IN MINT.asm
PRINTSTR2:          078F DEFINED AT LINE 1343 IN MINT.asm
                    > USED AT LINE 1337 IN MINT.asm
PRINTDEC:           0796 DEFINED AT LINE 1351 IN MINT.asm
                    > USED AT LINE 625 IN MINT.asm
PRINTDEC1:          07AF DEFINED AT LINE 1361 IN MINT.asm
                    > USED AT LINE 1353 IN MINT.asm
                    > USED AT LINE 1355 IN MINT.asm
                    > USED AT LINE 1357 IN MINT.asm
                    > USED AT LINE 1359 IN MINT.asm
PRINTDEC2:          07B1 DEFINED AT LINE 1363 IN MINT.asm
                    > USED AT LINE 1366 IN MINT.asm
PRINTHEX:           07BA DEFINED AT LINE 1370 IN MINT.asm
                    > USED AT LINE 621 IN MINT.asm
PRINTHEX2:          07C5 DEFINED AT LINE 1380 IN MINT.asm
                    > USED AT LINE 1374 IN MINT.asm
                    > USED AT LINE 1376 IN MINT.asm
PRINTHEX3:          07CE DEFINED AT LINE 1388 IN MINT.asm
                    > USED AT LINE 1386 IN MINT.asm
RPUSH:              07D9 DEFINED AT LINE 1398 IN MINT.asm
                    > USED AT LINE 600 IN MINT.asm
                    > USED AT LINE 607 IN MINT.asm
                    > USED AT LINE 1097 IN MINT.asm
                    > USED AT LINE 1110 IN MINT.asm
                    > USED AT LINE 1307 IN MINT.asm
                    > USED AT LINE 1320 IN MINT.asm
RPOP:               07E4 DEFINED AT LINE 1405 IN MINT.asm
                    > USED AT LINE 646 IN MINT.asm
                    > USED AT LINE 676 IN MINT.asm
                    > USED AT LINE 1125 IN MINT.asm
                    > USED AT LINE 1257 IN MINT.asm
RPOP2:              07EE DEFINED AT LINE 1410 IN MINT.asm
                    > USED AT LINE 1116 IN MINT.asm
STACK:              0880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
DSTACK:             0880 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 29 IN MINT.asm
                    > USED AT LINE 39 IN MINT.asm
                    > USED AT LINE 246 IN MINT.asm
                    > USED AT LINE 249 IN MINT.asm
                    > USED AT LINE 1076 IN MINT.asm
RSTACK:             0900 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 49 IN MINT.asm
TIB:                0900 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 89 IN MINT.asm
                    > USED AT LINE 121 IN MINT.asm
                    > USED AT LINE 130 IN MINT.asm
                    > USED AT LINE 147 IN MINT.asm
                    > USED AT LINE 1225 IN MINT.asm
                    > USED AT LINE 1240 IN MINT.asm
MINTVARS:           0A00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 751 IN MINT.asm
                    > USED AT LINE 1138 IN MINT.asm
SYSVARS:            0A00 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 52 IN MINT.asm
                    > USED AT LINE 1138 IN MINT.asm
VS0:                0A00 DEFINED AT LINE 16 IN ram.asm
VBASE16:            0A02 DEFINED AT LINE 17 IN ram.asm
VTIBPTR:            0A04 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 67 IN MINT.asm
                    > USED AT LINE 76 IN MINT.asm
                    > USED AT LINE 83 IN MINT.asm
                    > USED AT LINE 146 IN MINT.asm
                    > USED AT LINE 1244 IN MINT.asm
VDEFS:              0A06 DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 1126 IN MINT.asm
                    > USED AT LINE 1216 IN MINT.asm
                    > USED AT LINE 1306 IN MINT.asm
                    > USED AT LINE 1310 IN MINT.asm
                    > USED AT LINE 1331 IN MINT.asm
VLASTDEF:           0A08 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 880 IN MINT.asm
VHEAPPTR:           0A0E DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 185 IN MINT.asm
                    > USED AT LINE 194 IN MINT.asm
                    > USED AT LINE 599 IN MINT.asm
                    > USED AT LINE 882 IN MINT.asm
                    > USED AT LINE 898 IN MINT.asm
                    > USED AT LINE 1260 IN MINT.asm
VBYTEMODE:          0A36 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 187 IN MINT.asm
                    > USED AT LINE 598 IN MINT.asm
                    > USED AT LINE 1263 IN MINT.asm
TBPTR:              0A68 DEFINED AT LINE 46 IN ram.asm
RST08:              0A6A DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              0A6C DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              0A6E DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              0A70 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              0A72 DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              0A74 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               0A76 DEFINED AT LINE 54 IN ram.asm
INTVEC:             0A78 DEFINED AT LINE 55 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             0A7A DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            0A7C DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            0A7E DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
VARS:               0A80 DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 751 IN MINT.asm
DEFS:               0AC0 DEFINED AT LINE 70 IN ram.asm
                    > USED AT LINE 42 IN MINT.asm
                    > USED AT LINE 56 IN MINT.asm
                    > USED AT LINE 1308 IN MINT.asm
HEAP:               0C00 DEFINED AT LINE 72 IN ram.asm
                    > USED AT LINE 46 IN MINT.asm
